// Code generated by go-bindata.
// sources:
// resources/D410-b-12.bdf
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _d410B12Bdf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x5a\xdf\x73\xa3\x38\x12\x7e\xd7\x5f\xa1\xf2\xf3\x79\x56\x12\xbf\xc4\xbd\x11\x0c\x09\xb7\x0e\xf6\x19\x67\x92\xec\x8b\x8b\x38\x24\xe1\xc6\xb1\x33\xd8\x9e\xdd\xd9\xbf\xfe\x4a\xc8\x36\x0d\x08\x14\x66\xab\xba\xa6\x80\x49\xfa\xa3\x5b\xfd\x7d\xea\x16\x49\x96\xde\x62\x19\xce\xe2\x25\x66\x5f\x28\x2a\x2f\xc6\xe1\x6e\x7b\x08\x77\xc5\x6b\x36\x9e\xa4\xfb\xb7\xac\x18\xdf\x66\xcf\xf9\xf1\x7d\xbc\x18\xc7\xbb\xe2\x3d\xdd\x8c\xc7\x94\x8d\x29\x23\x63\xc7\x12\xe6\x8f\x29\x21\xe3\x28\x99\x71\x6e\xb9\x63\x8a\x92\xe8\x8f\x00\x53\x86\x1d\x0b\x3b\x56\xe9\xf2\x6a\x76\x17\x4f\xa2\xf8\xfa\x6a\xf6\x80\x39\xa6\x14\x13\x4c\x90\x3f\xbb\xbd\x0d\xe2\x25\x1e\x5d\x67\xdb\xac\x48\x0f\xd9\x33\x7e\xfa\x89\x5f\x76\xdb\xc3\x8b\xc0\xfe\x17\x7e\x3b\x1c\x3e\xfe\xfd\xdb\x6f\x97\x27\x5f\xf6\xbb\x63\xb1\xce\xe4\xf5\x36\x3b\x8c\x50\xf9\xf2\xf3\xc5\x6c\x1e\x2c\x96\x51\x90\x60\x43\x44\x70\x17\x4f\x16\x8f\x78\x74\x09\x62\x84\x42\xef\x36\x9a\x3e\xae\x62\xef\x36\xc0\x23\x19\xd2\x08\xdd\x07\xd1\xf5\xcd\xf2\xf4\x50\x06\x38\x42\xc9\xd4\x13\x6f\xb4\x18\xa1\x24\x58\xde\x47\x93\xe5\xcd\xe9\x07\x64\xe0\x23\xe4\x4d\x26\xab\x64\xf9\x38\x0d\x4e\xcf\x47\x68\x1e\x3d\x04\xd3\xd5\x29\x66\x34\x9f\x45\xf1\xf2\x7c\x47\xd0\x22\x48\x66\xd3\xbb\x65\x34\x8b\x57\x0f\x22\x19\xe0\xfe\x51\xdc\x27\x73\xcf\x8f\xe2\x6b\x3c\xf2\x47\xc8\xfb\x1a\x2c\xbc\xeb\x60\x55\xc2\x62\x4a\x08\xf2\x6f\xbc\x45\x12\x2c\x57\x8b\xe0\x3a\x4a\x96\x22\xa8\x53\x92\x47\x97\xff\x0a\x62\x7f\x36\x29\x3d\xd0\x51\x99\x6a\xf1\x5a\xe0\x17\xaa\x9f\xf4\x67\xd3\x69\xe0\x0b\xe8\xa4\xf4\x33\x4d\x0f\xf9\x96\x06\xdb\xf5\xee\x39\xdf\xbe\xca\x5f\x3e\xa7\xc8\xa4\x44\x64\xcd\x0f\xea\x0f\xc4\x4f\x7c\x0d\x16\x49\x34\x8b\xf1\x88\x10\xfa\x85\x90\xf3\x63\x2f\xf1\xc5\x5a\x52\x22\x6f\x27\x81\xbc\x67\xe8\x2e\x9e\x04\x8b\x69\x14\x07\xab\xf9\x2c\x89\x04\x3c\x1e\x53\xf0\x74\x79\x13\xf9\xbf\xc7\x41\x92\x60\x8a\x1e\x56\x37\xe5\xa2\x60\x07\xf9\xde\xfc\x7c\x43\x09\x5a\x78\xf7\x67\x04\x4e\xe4\xed\x05\x81\x10\x14\xcf\x16\xb7\x2b\x91\xca\xa0\x7c\x81\xe8\xfa\x6e\x51\xa5\x11\x79\x5f\xaf\x57\xd3\xd9\x7d\xb0\xf0\xbd\x04\x66\x57\x3c\xbf\x9b\xcf\x5b\xcf\x83\x78\x52\x95\x94\x4c\x1f\x76\x6d\x59\x6b\xe2\x0e\xef\x3f\xd2\x75\x86\x2e\x99\x37\x18\x4a\xe4\x6f\x73\xc3\xc0\x04\x4d\xce\xae\x30\x41\x57\x57\x0f\x98\x62\x59\xef\x57\xd1\xf2\xd6\x9b\x23\x89\x20\x1c\x01\x97\xd9\x5f\xeb\x4d\xfa\x0e\x7c\x1a\x3a\x9f\x2e\x36\x31\x3b\xfb\xe4\xa4\x69\xa4\x34\xae\xc2\xfa\x7e\xdc\x1d\xb2\xe7\xa7\x0d\x40\x33\xfb\xd1\x4c\x6c\x60\x86\xf9\x19\xcd\x25\x27\x6b\xfb\xde\x1e\xdf\x9f\xb2\x62\x9f\xbf\x6e\x81\x77\xab\xdf\xbb\x83\x5d\x4c\xab\x58\x18\x3f\x59\x18\x54\xff\x4a\x6b\xe3\x3d\xef\x36\x9b\xb4\x00\x58\xf6\x20\x2c\x4a\x90\x13\x9c\x82\x71\x7c\x44\x99\xb0\xd0\x17\xcf\xdb\x58\x1f\x59\xb1\xce\xb6\x07\x00\xe6\x0c\x02\x33\x09\xf2\x18\x32\x4d\x44\xb8\x00\x60\x44\x5c\x73\x0f\x11\x53\x01\x96\xbe\x7f\x64\xc5\x3e\xdd\x3e\x03\x38\x3e\x08\xce\x21\x88\x73\x61\x56\x89\x65\x31\xc4\x7d\x61\x0e\xeb\xaa\x89\x7d\xbe\x7d\xdd\xc0\xc2\x76\xfb\x01\x19\x36\xb0\x59\x95\x85\x4f\x44\x88\xca\x92\xfb\x48\x8b\x6c\xbb\xc9\x5e\x40\xf2\x4c\xd2\xef\xdc\xc0\xae\xa8\xba\x4b\x55\x9c\x9d\x43\x33\xcb\xc8\x3a\xe0\x8a\xfc\xf5\x0d\xe2\xd1\x41\x78\x17\xef\xd0\xba\xc2\x4b\xf7\x87\xac\xc8\xf7\xdf\x00\x9a\x46\x13\x1c\xec\x60\x8a\x0d\x50\x87\x2e\x43\x96\x89\x0c\x2e\xfe\x75\x59\x47\x05\x6e\x8e\x7b\x80\xa1\xd1\x88\x36\x86\xb4\x30\xa8\xae\xdb\x18\xeb\xdd\xfb\x7b\x0a\x40\x34\xd2\x20\x6b\x80\x7c\xa2\x06\xde\x7e\x7e\xbc\x65\x40\x16\x4c\xad\x2c\x08\xe1\xb4\xcf\x9e\xc3\x40\x4d\xc9\x7c\x07\x28\x62\x6a\xe8\xcf\x30\x85\xb2\xe9\xab\xde\x73\xbf\x49\xf7\x6f\xc0\xa5\x96\xe4\xb5\x2c\x13\x26\xf8\x5c\x31\xbc\x23\x19\x7f\x67\xc5\x0e\x60\x0c\x63\xb6\xc1\x4b\xe5\x60\x35\x33\xcb\xe2\x69\x23\xed\xb6\x80\xd1\xa6\x86\xd1\x16\x76\x31\xab\x91\xce\x26\xc8\x6b\xf1\x20\x54\x01\x1d\xfe\x04\x11\x59\x1a\x76\x37\xb5\xca\x17\x21\xc8\xdc\x51\x2e\x40\x25\xc1\x95\x8b\x7e\x78\x2b\x32\x10\x93\xa5\x21\x76\x27\x14\x43\x86\x7f\xba\xe0\x4c\x3c\x6f\x43\xbd\xec\x8e\x60\x73\xb1\xb4\xa4\xae\x21\x89\x3a\xf0\x11\x35\x11\x33\xcb\xf5\x32\x45\x38\xe2\xa1\x4a\xef\x5f\xf2\x1f\x30\x26\x2d\xb5\x6b\x48\x61\x70\xce\x17\x2f\x01\x64\x4c\x26\x72\x54\xeb\xb4\xcf\xff\x02\x40\x1a\x7a\x37\x2b\xcf\xaf\x54\x38\xf4\xab\xe2\x53\x26\x6f\x9f\xfd\x80\x7c\xb7\x86\xb5\x01\x22\xa6\x3a\x97\x2e\xa6\x68\x9f\xea\x5a\x6f\x0d\xeb\x02\x9c\x7a\x24\xfd\x51\x6d\x73\x48\x28\xeb\x13\x2d\x00\xe9\x40\x0a\x4e\x0b\x45\x3a\x16\x6a\xbd\xdb\xec\x60\xfe\x34\x22\xc1\xb0\xd5\xd0\x36\x72\x36\xb5\xce\x65\xef\x79\x13\x42\xbb\xe1\x3b\x0d\xb1\x87\x10\x5d\x5a\xb7\xc9\xf6\x60\xd7\xb2\x35\xca\x60\x35\x48\x54\x57\x52\xb9\x27\x53\x22\x9e\x2b\xca\xe0\xfb\x31\x05\x6d\xad\xad\x55\x06\x03\x53\x6c\x81\x8a\x23\x1d\x92\xf3\x5a\x64\xe9\x21\x03\x52\x60\x6b\xa4\xc0\xea\xe8\x26\xe4\x9b\xf7\xef\x0d\xdf\x8f\xd9\xfe\x90\xc3\x75\xb1\x35\x72\x60\xd7\x65\xdb\xe1\x82\xfc\xfc\x4c\x1d\x7a\x5e\x23\xe5\x7e\x9f\x02\xde\xd8\xc3\xd5\x80\x21\xd7\x43\x5e\x69\x57\xfe\x29\x4e\x43\xc5\x1b\x0f\xc0\x0c\x53\x82\xc6\x76\x27\x85\x41\x5a\x1b\xe6\x0a\xc0\x0c\x53\x81\xb0\x8c\x46\x9a\x03\xae\x43\x55\x34\x3e\x80\x19\x36\x05\xc8\xa4\x35\x1b\x59\xa6\x4e\xda\x04\xc0\x0c\xeb\x11\xc2\x32\x69\x97\x20\x4e\x66\xaa\xb7\xee\x00\xc0\x68\x24\xa0\x6b\xe7\x91\x9b\x0f\xef\xdd\xb8\xc3\x0a\xc6\x19\xd6\x1f\x74\xc1\x28\xf9\x73\x0d\x60\x86\xf5\x06\xcd\xb5\x29\x2b\xad\x6b\x6d\x6e\x00\xcc\xb0\xc6\x00\xb6\x6d\xb0\x9a\x95\x05\x1d\x01\x18\x8d\x0c\x34\xba\xb7\x90\x37\xfb\xb6\x9e\xee\xed\x3f\x00\x66\x98\x0a\x90\x73\x53\x73\x31\x29\x3e\xca\x3d\xed\x77\x00\x33\x4c\x05\x78\xd9\xd1\x70\x2e\x46\x75\x8f\xa0\x89\x9c\x6e\x4d\x75\xd2\xa6\x00\x66\x98\x0a\xb4\x4f\x52\x7a\x0a\xfa\x16\xc0\x0c\x53\x01\xce\x90\x6f\x0b\xd1\x74\x99\xb0\xfe\x12\x88\x01\xcc\x30\x15\x90\x1e\x7d\x86\x3c\x09\xe3\x21\x6e\x77\xc2\xcc\x00\xcc\x30\x15\x80\x6d\x0d\x34\x65\x03\x35\xaf\x60\xf8\x40\x15\x00\x30\xa1\xaf\x51\x81\xff\x02\x98\x81\x2a\x50\xdf\x6f\x64\xde\xc4\x78\xe5\x29\x60\x16\x00\x66\x98\x0a\x34\xa2\x71\x7b\x0b\x3a\x01\x30\xc3\x66\x83\xd3\xda\x94\x59\x72\x74\xf3\xce\x12\xc0\x0c\x53\x01\x78\xa8\xd0\xb0\x36\xcc\x1d\x80\x19\xae\x02\x9f\xae\xb4\xaf\x00\x66\xa0\x0a\x80\xa9\xda\x34\x4f\xa7\x8f\x5d\xd1\xdc\x03\x98\xc1\x2a\x00\xcb\xcc\x65\x42\x11\x7c\x5b\x5d\x02\x0f\x00\xe6\x57\x54\x40\xc6\x21\x5a\x4f\x50\xdf\x6d\x98\x47\x00\x33\x4c\x05\x1a\x30\xfd\x25\xf0\x47\x05\xe3\x0e\xee\x05\x94\x87\x2c\x4a\x85\x7e\x2a\xd2\xf5\xb7\xec\x50\x3f\x7a\x74\x35\x7a\x60\x36\xf6\xd1\xae\x2d\x41\x15\xd7\x53\xba\xfe\xd6\x38\x41\x72\x87\x9d\x05\x36\x66\x05\x39\xcf\x77\x46\xd6\x38\xe5\x74\x35\xe2\x60\xd6\xe7\x92\xb0\x83\xb2\xca\xd0\xd2\xfd\x3a\xcf\xd7\x79\xb1\x3e\x82\x0f\x15\xae\x46\x26\xac\xf2\xd3\x81\x03\x4e\x94\xac\x52\xe8\xda\xee\x8f\xdb\xe7\xac\xd8\xaf\x77\x05\x18\xaf\xdd\x4f\x9d\x11\xb2\xde\x33\xc2\xd7\x22\x85\x47\x2b\xae\xf6\x88\xd0\xc0\x46\xed\x50\x5b\x2e\x88\x22\x1f\xc0\xa9\x96\xf7\x76\x4d\x93\xcb\x65\x15\xca\x2c\x3b\x25\xd5\xc6\xf2\x04\xbc\x6b\xe8\x6e\x77\xb4\x30\x57\x1c\xf9\xe7\x6e\xcc\x37\xc5\xad\xe2\x90\x01\xc0\x68\xe8\x6e\xb7\x82\x10\xae\x25\x58\x47\xbb\x07\x8e\x66\x29\xd1\xd0\xdc\x6e\x9f\x9e\x95\xe6\x98\xe5\x87\x0b\x19\x88\x2f\x6e\x15\x83\x3f\xc4\xd1\xb0\x5b\x19\xc6\xa5\x9d\x50\x86\xf1\x02\xdd\x0f\xdb\xe5\xa9\x8f\x18\xab\x1a\xef\xfe\x63\xac\x57\x88\xa3\x9d\xf9\x39\xa6\xd5\x59\x4c\x95\xa5\x32\x45\xa4\xbb\x05\x7f\x83\x20\x1a\xf6\x7e\xa6\xb2\xa4\xb5\x71\x72\x88\xa3\xe1\xb1\x81\x39\x94\x25\x1f\x1c\x29\x5d\x2c\x50\x65\xec\x7f\x10\x44\xc3\x6c\x4b\x5c\x82\x94\x51\x5e\x1e\x8a\xf0\x52\x65\x81\x71\x8e\x1c\x15\xd6\x37\x88\xa5\x21\x7c\x57\xe2\xda\xf3\x8b\xe2\xbc\x0c\xe2\x68\xa8\xdf\xf8\x6a\xd5\x48\x59\x7f\xee\xde\x21\x8e\x76\xab\xaf\x91\x26\xf0\x4f\xfd\xca\xc5\x14\x07\xa5\xc0\x3d\xd5\x72\xbf\xe6\xfe\x33\xe5\xb5\x83\xee\x7f\x85\xf2\xbc\x77\x50\xfd\x80\xee\x35\x94\x6f\x50\xf1\xf2\xf6\x52\x73\x7b\x66\x94\xef\x10\xe4\x9f\xf2\xbd\xeb\xcb\x42\x01\x41\xb4\x7c\x57\xad\x43\xef\x9c\xb5\x87\xee\x35\x34\x57\xae\x83\x5d\x72\xb0\x6b\x1d\x0e\xd0\xbd\x96\xe0\xbc\xf6\x87\x04\x2a\xd1\xa5\xca\xd6\x03\x82\x68\x99\x5d\x8b\x01\x16\x52\xd7\xee\xf4\x03\xba\xd7\xb6\xee\x76\xd7\x20\x22\xdb\xea\xb6\xfb\x3f\xa1\xfb\x61\x3c\x86\xa3\x87\xcb\x90\xad\x9a\xa2\xc0\xd7\x22\xca\x86\xf1\x98\x9b\xc8\xe4\xc8\x20\xc2\xcc\x0e\xb5\xfb\x09\xdd\x6b\x79\x5c\xe3\x40\x23\xf1\x3d\x7b\xde\xdf\x10\x44\xcb\x66\xbb\x31\xa6\xc3\x41\x43\x79\x1a\x2c\x7a\xf1\xac\x3e\x63\x50\xf6\x89\x4e\x1c\x0c\x19\x06\x50\x6b\x0e\xae\x0d\xf5\x90\x01\x49\xcd\x34\xa4\xd6\xfe\xad\x50\x0f\xbb\xcb\xc8\x1a\x33\x06\x65\x1a\x9a\x9b\xad\x4d\xa9\xa2\x1f\xb8\x56\x7e\x95\x2a\x87\x8c\x43\xbe\x79\x86\x2d\x1d\xd3\x4e\xef\x06\xa6\x55\xcf\x6e\x97\x7f\x4d\x41\x54\x2b\x75\xdc\xe6\x84\x38\x21\xf4\x3d\x6c\x64\xf7\x3c\x64\x99\xea\x7f\xcf\x68\x41\x3c\x09\x67\xf1\x12\xfd\x3f\x00\x00\xff\xff\x09\x5b\xdf\x1a\x5a\x29\x00\x00")

func d410B12BdfBytes() ([]byte, error) {
	return bindataRead(
		_d410B12Bdf,
		"D410-b-12.bdf",
	)
}

func d410B12Bdf() (*asset, error) {
	bytes, err := d410B12BdfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "D410-b-12.bdf", size: 10586, mode: os.FileMode(436), modTime: time.Unix(1516954857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"D410-b-12.bdf": d410B12Bdf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"D410-b-12.bdf": &bintree{d410B12Bdf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

